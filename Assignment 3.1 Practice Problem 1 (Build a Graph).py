# -*- coding: utf-8 -*-
"""Assignment 3.1 Practice Problem 1 (Build a Graph).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SF4y3e11MhATF-gLokL6s2ILL36qRLUY

# Problem

You are given an integer n. Determine if there is an unconnected graph with n vertices that contains at least two connected components and contains the number of edges that is equal to the number of vertices.



Each vertex must follow one of these conditions:

1.   Its degree is less than or equal to 1.
2.   It's a [cut-vertex](https://en.wikipedia.org/wiki/Biconnected_component)



**Note:**


The graph must be simple.

Loops and multiple edges are not allowed.



**Input format:**

First line: n

**Output format**

Print Yes if it is an unconnected graph. Otherwise, print No.

**Constraints**

1 <= n <= 100


**Output requirements:**


Recording of your screen while you answer the question.

1.   Recording of your screen while you answer the question.
2.  Python notebook.
3. PDF file of your presentation of the solution.
"""

class Graph:
  def __init__(self, n):
    self.vertices = n
    self.edges = 0
    self.adj_list = {v: set() for v in range (1, n + 1)}

    def add_edge(self, u, v):
      if u != v and v not in self.adj.list[u]:
        self.adj.list[u].add(v)
        self.adj.list[u].add(u)
        self.edges += 1

        def is_unconnected(self):
          visited = set()
          components = 0

          def dfs(node):
            nonlocal visited
            visited.add(node)
            for neighbor in self.adj.list[node]:
              if neighbor not in visited:
                dfs(neighbor)

          for node in self.adj_list:
            if node not in visited:
              dfs(node)
              components += 1

            return components > 1

def build_graph(n):
  graph = Graph(n)
  if n == 2:
    graph.add_edge(1, 2)
  else:
      for i in range(1, n):
        graph.add_edge(i, i+1)
        graph.add_edge(1, n)

  return graph

  def main():
     if n <= 1 or n >=100:
          print("Invalid input. Please enter a number betweeen 1 and 99.")
          return
     graph = build_graph(n)
     if graph.is_unconnected():
        print("Yes")
     else:
        print("No")

n = int(input("Enter the number of vertices (i < n < 100): "))

vertices = []
print("Enter the edges (format: u v)")
for _ in range(n):
  u, v = map(int, input().split())
  vertices.append((u, v))

def main(n, vertices):
    pass

main(n, vertices)